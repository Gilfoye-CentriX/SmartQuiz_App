[
    {
      "question": "Which of these is a mutable data type?",
      "options": ["Tuple", "String", "List", "Integer"],
      "answer": "List"
    },
    {
      "question": "Which keyword initiates a loop in Python?",
      "options": ["loop", "for", "while", "iterate"],
      "answer": "for"
    },
    {
      "question": "How do you declare a function in Python?",
      "options": ["function myFunc():", "def myFunc():", "create myFunc():", "new myFunc():"],
      "answer": "def myFunc():"
    },
    {
      "question": "How do you check if 'a' equals 'b' in Python?",
      "options": ["a = b", "a == b", "a === b", "a equals b"],
      "answer": "a == b"
    },
    {
      "question": "Which method appends an element to the end of a list in Python?",
      "options": ["append()", "extend()", "insert()", "add()"],
      "answer": "append()"
    },
    {
      "question": "What distinguishes an integer from a float data type in Python?",
      "options": [
        "Integers are whole numbers, while floats are decimal numbers",
        "Integers are used for counting, while floats are used for measurements",
        "Integers are always positive, while floats can be negative",
        "Integers are immutable, while floats are mutable"
      ],
      "answer": "Integers are whole numbers, while floats are decimal numbers"
    },
    {
      "question": "How do you create a list in Python?",
      "options": ["[]", "list()", "createList()", "newList()"],
      "answer": "[]"
    },
    {
      "question": "How do you access elements in a list in Python?",
      "options": ["listName[index]", "listName.get(index)", "listName[element]", "None of the above"],
      "answer": "listName[index]"
    },
    {
      "question": "What is the difference between an if statement and an elif statement in Python?",
      "options": [
        "An if statement checks a single condition, while an elif statement checks multiple conditions",
        "An if statement is used for decision-making, while an elif statement is used for error handling",
        "An if statement is always executed, while an elif statement is only executed if the previous if statement is False",
        "None of the above"
      ],
      "answer": "An if statement checks a single condition, while an elif statement checks multiple conditions"
    },
    {
      "question": "What is the purpose of a for loop in Python?",
      "options": [
        "To repeat a block of code multiple times",
        "To check a condition multiple times",
        "To store data in a temporary variable",
        "None of the above"
      ],
      "answer": "To repeat a block of code multiple times"
    },
    {
      "question": "What is the role of the return statement in Python?",
      "options": [
        "To send data back from a function to the calling code",
        "To terminate a loop early",
        "To check a condition",
        "None of the above"
      ],
      "answer": "To send data back from a function to the calling code"
    },
    {
      "question": "What is a module in Python?",
      "options": [
        "A file containing Python code",
        "A collection of functions and variables",
        "A way to import external code into a program",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "question": "What is the function of the input() function in Python?",
      "options": [
        "To get user input from the console",
        "To print a message to the console",
        "To assign a value to a variable",
        "To terminate a program"
      ],
      "answer": "To get user input from the console"
    },
    {
      "question": "How do you create a set in Python?",
      "options": ["{}", "set()", "createSet()", "newSet()"],
      "answer": "set()"
    },
    {
      "question": "How do you check if an element is in a set in Python?",
      "options": ["in", "exists()", "memberOf()", "contains()"],
      "answer": "in"
    },
    {
      "question": "What differentiates a dictionary from a list in Python?",
      "options": [
        "Dictionaries store data using key-value pairs, while lists store data sequentially",
        "Dictionaries are mutable, while lists are immutable",
        "Dictionaries are for storing and retrieving data, while lists are for iterating over data",
        "All of the above"
      ],
      "answer": "Dictionaries store data using key-value pairs, while lists store data sequentially"
    },
    {
      "question": "How do you retrieve values from a dictionary in Python?",
      "options": ["dictionaryName[key]", "dictionaryName.get(key)", "dictionaryName[value]", "None of the above"],
      "answer": "dictionaryName[key]"
    },
    {
      "question": "What is the purpose of a while loop in Python?",
      "options": [
        "To repeat a block of code until a condition is met",
        "To check a condition multiple times",
        "To store data in a temporary variable",
        "None of the above"
      ],
      "answer": "To repeat a block of code until a condition is met"
    },
    {
      "question": "What is the distinction between a break and a continue statement in Python?",
      "options": [
        "A break statement stops the loop immediately, while a continue statement skips the current iteration and moves to the next one",
        "A break statement exits a loop early, while a continue statement skips an iteration",
        "A break statement is used only with while loops, while a continue statement can be used with both while and for loops",
        "None of the above"
      ],
      "answer": "A break statement stops the loop immediately, while a continue statement skips the current iteration and moves to the next one"
    },
    {
      "question": "What is the function of a try-except block in Python?",
      "options": [
        "To handle errors gracefully",
        "To check a condition",
        "To repeat a block of code",
        "None of the above"
      ],
      "answer": "To handle errors gracefully"
    },
    {
      "question": "What is the difference between raising an exception and throwing an exception in Python?",
      "options": [
        "Raising an exception is explicit, while throwing an exception is implicit",
        "Raising an exception signals an error, while throwing an exception handles an error",
        "Raising an exception is used only with try-except blocks, while throwing an exception can be used outside try-except blocks",
        "None of the above"
      ],
      "answer": "Raising an exception is explicit, while throwing an exception is implicit"
    },
    {
      "question": "What is the purpose of the import keyword in Python?",
      "options": [
        "To import external code into a program",
        "To define a function",
        "To create a variable",
        "To print a message to the console"
      ],
      "answer": "To import external code into a program"
    },
    {
      "question": "What does the isinstance() function do in Python?",
      "options": [
        "To check if an object is of a particular type",
        "To convert an object to another type",
        "To delete an object",
        "To create an object"
      ],
      "answer": "To check if an object is of a particular type"
    },
    {
      "question": "What differentiates a class from an object in Python?",
      "options": [
        "A class is a blueprint for creating objects, while an object is an instance of a class",
        "A class defines attributes and methods, while an object stores and manipulates data",
        "A class is immutable, while an object is mutable",
        "None of the above"
      ],
      "answer": "A class is a blueprint for creating objects, while an object is an instance of a class"
    },
    {
      "question": "How do you create an object from a class in Python?",
      "options": ["className()", "objectName = className()", "className = objectName", "None of the above"],
      "answer": "objectName = className()"
    },
    {
      "question": "What is the role of the self keyword in Python?",
      "options": [
        "To refer to the current instance of a class",
        "To create a new instance of a class",
        "To delete an instance of a class",
        "None of the above"
      ],
      "answer": "To refer to the current instance of a class"
    },
    {
      "question": "What distinguishes inheritance from polymorphism in Python?",
      "options": [
        "Inheritance allows a class to inherit attributes and methods from another class, while polymorphism allows methods to be used interchangeably between classes",
        "Inheritance is used for creating new classes, while polymorphism is used for defining class behavior",
        "Inheritance is only for classes, while polymorphism is only for functions",
        "None of the above"
      ],
      "answer": "Inheritance allows a class to inherit attributes and methods from another class, while polymorphism allows methods to be used interchangeably between classes"
    },
    {
      "question": "What is the role of the super() function in Python?",
      "options": [
        "To access methods from a parent class",
        "To create a new class",
        "To call a constructor",
        "None of the above"
      ],
      "answer": "To access methods from a parent class"
    }
]
